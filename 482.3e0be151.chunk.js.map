{"version":3,"file":"482.3e0be151.chunk.js","mappings":"8NAEA,IAAIA,GAAmB,EC0BvB,SAASC,EAAT,EAeEC,GACA,IAfA,SACEC,EADF,MAEEC,EAAQ,EAFV,OAGEC,EAAS,EAHX,gBAIEC,EAAkB,QAJpB,gBAKEC,EALF,eAMEC,EANF,OAOEC,EAAS,EAPX,SAQEC,EARF,cASEC,EAAgB,MATlB,WAUEC,EAAa,QAVf,eAWEC,EAAiB,QAXnB,IAYEC,EAAM,GAGR,EACA,MAAMC,GAAKC,EAAAA,EAAAA,IAAUC,GAAUA,EAAMF,KAG/BG,EAAOC,EAAAA,SAAc,KAClB,CAAEf,QAAOC,YACf,CAACD,EAAOC,KAGJe,EAASC,GAAcF,EAAAA,cAA8BG,GAC5DH,EAAAA,SAAc,UACYG,IAApBf,IACJ,IAAIgB,EAAAA,eAAsBC,UAAUjB,GAAiBkB,KAAKJ,KACzD,CAACd,IAIJY,EAAAA,SAAc,UACIG,IAAZF,IACJA,EAAQM,WAAaX,EAAGY,aAAaC,sBACpC,CAACR,EAASL,IAEb,MAAOc,EAAcC,EAAaC,GAAeZ,EAAAA,SAAc,KAC7D,MAAMU,EAAeX,EAAKd,MAAQc,EAAKb,OACvC,YAAgBiB,IAAZF,EACK,CAACS,EAAcA,EAAcA,GAI/B,CAACA,EAFYT,EAAQY,MAAM5B,MAAQgB,EAAQY,MAAM3B,OACpCe,EAAQY,MAAM3B,OAASe,EAAQY,MAAM5B,SAExD,CAACgB,EAASF,KAENe,EAAgBC,GAAqBf,EAAAA,UAC1C,KACE,MAAMgB,EAAQ,IAAIZ,EAAAA,MAAY,IAAIA,EAAAA,QAAiB,GACnD,MAAO,CAACY,EAAMC,QAASD,EAAMC,QAASD,EAAMC,QAASD,EAAMC,aAIxDC,EAAaC,GAAkBnB,EAAAA,UAAe,KAC5C,IAAKD,MAGdC,EAAAA,WAAgB,KACd,QAAgBG,IAAZF,EAAuB,OAE3B,MAAMmB,EAAU,IAAKrB,GAEE,YAAnBV,IACEsB,GAAeD,GACjBU,EAAQnC,MAAQc,EAAKd,MACrBmC,EAAQlC,OAASkC,EAAQnC,MAAQ2B,IAEjCQ,EAAQlC,OAASa,EAAKb,OACtBkC,EAAQnC,MAAQmC,EAAQlC,OAASyB,IAId,UAAnBtB,IACEsB,GAAeD,GACjBU,EAAQlC,OAASa,EAAKb,OACtBkC,EAAQnC,MAAQmC,EAAQlC,OAASyB,IAEjCS,EAAQnC,MAAQc,EAAKd,MACrBmC,EAAQlC,OAASkC,EAAQnC,MAAQ2B,IAIrCO,EAAeC,GACfL,GAAmBM,IACjBA,EAAO,GAAGC,IAAI,IAAIlB,EAAAA,QAAc,GAAI,EAAG,GAAkB,GAAdL,EAAKb,QAChDmC,EAAO,GAAGC,IAAI,IAAIlB,EAAAA,QAAc,EAAG,EAAG,GAAiB,GAAbL,EAAKd,OAC/CoC,EAAO,GAAGC,IAAI,IAAIlB,EAAAA,QAAc,EAAG,EAAG,GAAkB,GAAdL,EAAKb,QAC/CmC,EAAO,GAAGC,IAAI,IAAIlB,EAAAA,SAAe,EAAG,EAAG,GAAiB,GAAbL,EAAKd,OACzC,IAAIoC,QAEZ,CACD9B,EACAU,EACAF,EACAV,EACAsB,EACAC,EACAF,IAGF,MAAMa,EAAWvB,EAAAA,OAA0B,MAE3CA,EAAAA,WAAgB,KACd,MAAMwB,EAAQD,EAASE,QACT,OAAVD,IACJA,EAAME,mBAAkB,GACxBZ,EAAea,SAASX,IACtBA,EAAMY,aAAaJ,EAAMK,mBAE1B,CAACtC,EAAUuB,IAEd,MAAMgB,EDxIC9B,EAAAA,SAAc,MACVnB,GACR,ICuIGkD,EC5IO,SAAsBC,GACnC,MAAMC,EAAUjC,EAAAA,OAAa,GAE7B,OAAOA,EAAAA,SAAc,KACnB,IAAI+B,IAAQE,EAAQR,QAKpB,OAJIM,EAAM,MACRA,EAAM,EACNE,EAAQR,QAAUM,GAEbA,IACNC,GDkISE,CAAa,CACvBjC,EACAV,EACAP,EACAkC,EACAJ,IAGIqB,EAAQnC,EAAAA,SAAc,SACTG,IAAbnB,EAA+B,GAC9BoD,MAAMC,QAAQrD,GACZA,EAD8B,CAACA,IAErC,CAACA,IAEEsD,EAAmBtC,EAAAA,aAEvB,CAACuC,EAAYC,KAEX,MAAMvD,EAAQkD,EAAMM,QAAO,CAACxD,EAAOyD,IAASzD,EAAQyD,EAAKC,MAAM1D,OAAO,GACvDkD,EAAMM,QACnB,CAACvD,EAAQwD,IAASxD,EAASwD,EAAKC,MAAMzD,QACtC,GAGF,IAAI0D,EAAI,EACJC,EAAI,EA6BR,GAxBsB,QAAlBrD,GAA8C,UAAnBE,IAC7BkD,GAAkB,GAAd7C,EAAKd,MACT2D,GAAKT,EAAMM,QAAO,CAACxD,EAAOyD,EAAMI,IACT,IAAjBA,EAA8C,GAAnBJ,EAAKC,MAAM1D,MACtC6D,EAAeN,EAAcvD,EAC1BA,EAAQyD,EAAKC,MAAM1D,OACzB,IAEiB,QAAlBO,GAA8C,WAAnBE,IAC7BkD,GAAa,GAAT3D,EACJ2D,GAAKT,EAAMM,QAAO,CAACxD,EAAOyD,EAAMI,IACT,IAAjBA,EAA8C,GAAnBJ,EAAKC,MAAM1D,MACtC6D,EAAeN,EAAcvD,EAC1BA,EAAQyD,EAAKC,MAAM1D,OACzB,IAEiB,QAAlBO,GAA8C,QAAnBE,IAC7BkD,EAAiB,GAAb7C,EAAKd,MAAcA,EACvB2D,GAAKT,EAAMM,QAAO,CAACxD,EAAOyD,EAAMI,IACT,IAAjBA,EAA8C,GAAnBJ,EAAKC,MAAM1D,MACtC6D,EAAeN,EAAcvD,EAC1BA,EAAQyD,EAAKC,MAAM1D,OACzB,IAEiB,QAAlBO,GAA8C,kBAAnBE,EAC7B,GAAIT,GAASc,EAAKd,MAChB2D,GAAa,GAAT3D,EACJ2D,GAAKT,EAAMM,QAAO,CAACxD,EAAOyD,EAAMI,IACT,IAAjBA,EAA8C,GAAnBJ,EAAKC,MAAM1D,MACtC6D,EAAeN,EAAcvD,EAC1BA,EAAQyD,EAAKC,MAAM1D,OACzB,OACE,CACL,IAAI8D,EACFZ,EAAMa,QAAU,EAAI,GAAKjD,EAAKd,MAAQA,IAAUkD,EAAMa,OAAS,GACjEJ,GAAkB,GAAd7C,EAAKd,MACT2D,GAAKT,EAAMM,QAAO,CAACxD,EAAOyD,EAAMI,IACT,IAAjBA,EAA8C,GAAnBJ,EAAKC,MAAM1D,MACtC6D,EAAeN,EAAcvD,EAC1BA,EAAQyD,EAAKC,MAAM1D,MAAQ8D,GACjC,GAgBP,MATsB,QAAlBvD,GAA0C,UAAfC,IAC7BoD,EAAkB,GAAd9C,EAAKb,OAAoC,GAArBqD,EAAMI,MAAMzD,QAKhB,QAAlBM,GAA0C,QAAfC,IAC7BoD,GAAmB,GAAf9C,EAAKb,OAAqC,GAArBqD,EAAMI,MAAMzD,QAEhC,CAAC0D,EAAGC,EAAG,KAEhB,CAACV,EAAOpC,EAAMP,EAAeC,EAAYC,IAG3C,OACE,yBACEuD,KAAKC,EAAAA,EAAAA,GAAU,CAAC3B,EAAUxC,IAC1BgD,IAAKA,EACLxC,SAAUA,GAEV,wBAAMuC,YAAaA,EAAcxC,GAC/B,uCAAqB6D,KAAM,CAACpD,EAAKd,MAAOc,EAAKb,UAC7C,qCACEkE,MAAOjE,EACPkE,aAAa,EACbC,YAAY,KAGhB,wBAAMxB,YAAaA,EAAcxC,EAAQiE,aAAqBpD,IAAZF,GAChD,uCAAqBkD,KAAM,CAACjC,EAAYjC,MAAOiC,EAAYhC,UAC3D,qCACEsE,IAAKvD,EACLoD,aAAa,EACbC,YAAY,EACZxC,eAAgBA,KAGnBd,EAAAA,SAAAA,IAAmBhB,GAAU,CAACuD,EAAOC,IAElC,yBAAOT,IAAKS,EAAOjD,SAAU+C,EAAiBC,EAAOC,IAClDD,MAQb,MAAevC,EAAAA,WAAiBlB,GEtQhC,MAAM2E,EAAa,GAEJ,SAASC,IACtB,OACE,gBAAC,KAAD,CAAQC,MAAI,EAACC,QAAM,EAAChE,GAAI,CAAEiE,sBAAsB,IAE9C,gBAACC,EAAA,EAAD,CAAmBC,aAAW,EAACxE,SAAU,CAAC,EAAG,EAAG,KAChD,gBAACyE,EAAA,EAAD,CAAeD,aAAW,IAC1B,qCAIA,gBAAC,EAAD,CACE5E,gBAAgB,UAChBF,MAAO,EACPC,OAAQ,EACRK,SAAU,CAAC,EAAG,EAAG,GACjBG,eAAe,gBACfD,WAAW,UAEX,gBAAC,EAAD,CACER,MAAOwE,EACPvE,OAAQuE,EACRpE,eAAe,QACfF,gBAAgB,QAChBC,gBAAgB,kCAElB,gBAAC,EAAD,CACEH,MAAOwE,EACPvE,OAAQuE,EACRpE,eAAe,QACfF,gBAAgB,QAChBC,gBAAgB,8BAElB,gBAAC,EAAD,CACEH,MAAOwE,EACPvE,OAAQuE,EACRpE,eAAe,QACfF,gBAAgB,QAChBC,gBAAgB,iCAElB,gBAAC,EAAD,CACEH,MAAOwE,EACPvE,OAAQuE,EACRpE,eAAe,QACfF,gBAAgB,QAChBC,gBAAgB","sources":["webpack://@app/client/./src/lib/hooks/use-render-order.tsx","webpack://@app/client/./src/lib/components/surface.tsx","webpack://@app/client/./src/lib/hooks/use-render-key.tsx","webpack://@app/client/./src/examples/layout.tsx"],"sourcesContent":["import React from \"react\";\n\nlet lastRenderOrder = -1;\n\nexport default function useRenderOrder() {\n  return React.useMemo(() => {\n    return ++lastRenderOrder;\n  }, []);\n}\n","import React from \"react\";\nimport { mergeRefs } from \"react-merge-refs\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport useRenderOrder from \"@/lib/hooks/use-render-order\";\nimport useRenderKey from \"@/lib/hooks/use-render-key\";\n\ntype Props = {\n  children?: React.ReactNode;\n  width?: number;\n  height?: number;\n  backgroundColor?: THREE.ColorRepresentation;\n  backgroundImage?: string;\n  backgroundSize?: \"cover\" | \"contain\";\n  flexDirection?: \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\";\n  alignItems?: \"start\" | \"center\" | \"end\";\n  justifyContent?:\n    | \"start\"\n    | \"center\"\n    | \"end\"\n    | \"space-between\"\n    | \"space-evenly\"\n    | \"space-around\";\n  gap?: number;\n  zIndex?: number;\n  position?: [x: number, y: number, z: number];\n};\n\nfunction Surface(\n  {\n    children,\n    width = 1,\n    height = 1,\n    backgroundColor = \"black\",\n    backgroundImage,\n    backgroundSize,\n    zIndex = 0,\n    position,\n    flexDirection = \"row\",\n    alignItems = \"start\",\n    justifyContent = \"start\",\n    gap = 0,\n  }: Props,\n  forwardedRef: React.ForwardedRef<THREE.Group>\n) {\n  const gl = useThree((state) => state.gl);\n\n  // Set geometry size from `width` and `height` props\n  const size = React.useMemo(() => {\n    return { width, height };\n  }, [width, height]);\n\n  // Set material texture from `backgroundImage` prop\n  const [texture, setTexture] = React.useState<THREE.Texture>(undefined);\n  React.useMemo(() => {\n    if (backgroundImage === undefined) return;\n    new THREE.TextureLoader().loadAsync(backgroundImage).then(setTexture);\n  }, [backgroundImage]);\n\n  // Set texture `anisotropy` to max available (prevents blurriness)\n  // when viewing at an angle\n  React.useMemo(() => {\n    if (texture === undefined) return;\n    texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n  }, [texture, gl]);\n\n  const [surfaceRatio, imageRatioX, imageRatioY] = React.useMemo(() => {\n    const surfaceRatio = size.width / size.height;\n    if (texture === undefined) {\n      return [surfaceRatio, surfaceRatio, surfaceRatio];\n    }\n    const imageRatioX = texture.image.width / texture.image.height;\n    const imageRatioY = texture.image.height / texture.image.width;\n    return [surfaceRatio, imageRatioX, imageRatioY];\n  }, [texture, size]);\n\n  const [clippingPlanes, setClippingPlanes] = React.useState<THREE.Plane[]>(\n    () => {\n      const plane = new THREE.Plane(new THREE.Vector3(), 1);\n      return [plane.clone(), plane.clone(), plane.clone(), plane.clone()];\n    }\n  );\n\n  const [textureSize, setTextureSize] = React.useState(() => {\n    return { ...size };\n  });\n\n  React.useEffect(() => {\n    if (texture === undefined) return;\n\n    const newSize = { ...size };\n\n    if (backgroundSize === \"contain\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      } else {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      }\n    }\n\n    if (backgroundSize === \"cover\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      } else {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      }\n    }\n\n    setTextureSize(newSize);\n    setClippingPlanes((planes) => {\n      planes[0].set(new THREE.Vector3(0, -1, 0), size.height * 0.5);\n      planes[1].set(new THREE.Vector3(1, 0, 0), size.width * 0.5);\n      planes[2].set(new THREE.Vector3(0, 1, 0), size.height * 0.5);\n      planes[3].set(new THREE.Vector3(-1, 0, 0), size.width * 0.5);\n      return [...planes];\n    });\n  }, [\n    position,\n    texture,\n    size,\n    backgroundSize,\n    imageRatioX,\n    imageRatioY,\n    surfaceRatio,\n  ]);\n\n  const groupRef = React.useRef<THREE.Group>(null);\n\n  React.useEffect(() => {\n    const group = groupRef.current;\n    if (group === null) return;\n    group.updateMatrixWorld(true);\n    clippingPlanes.forEach((plane) => {\n      plane.applyMatrix4(group.matrixWorld);\n    });\n  }, [position, clippingPlanes]);\n\n  const renderOrder = useRenderOrder();\n  const key = useRenderKey([\n    texture,\n    position,\n    children,\n    textureSize,\n    clippingPlanes,\n  ]);\n\n  const nodes = React.useMemo(() => {\n    if (children === undefined) return [];\n    if (!Array.isArray(children)) return [children];\n    return children;\n  }, [children]);\n\n  const getChildPosition = React.useCallback(\n    // @todo fix types\n    (child: any, index: number): Props[\"position\"] => {\n      // @todo simplify this\n      const width = nodes.reduce((width, node) => width + node.props.width, 0);\n      const height = nodes.reduce(\n        (height, node) => height + node.props.height,\n        0\n      );\n\n      let x = 0;\n      let y = 0;\n\n      /**\n       * row -> justifyContent\n       */\n      if (flexDirection === \"row\" && justifyContent === \"start\") {\n        x = size.width * -0.5;\n        x += nodes.reduce((width, node, currentIndex) => {\n          if (currentIndex === 0) return node.props.width * 0.5;\n          if (currentIndex > index) return width;\n          return width + node.props.width;\n        }, 0);\n      }\n      if (flexDirection === \"row\" && justifyContent === \"center\") {\n        x = width * -0.5;\n        x += nodes.reduce((width, node, currentIndex) => {\n          if (currentIndex === 0) return node.props.width * 0.5;\n          if (currentIndex > index) return width;\n          return width + node.props.width;\n        }, 0);\n      }\n      if (flexDirection === \"row\" && justifyContent === \"end\") {\n        x = size.width * 0.5 - width;\n        x += nodes.reduce((width, node, currentIndex) => {\n          if (currentIndex === 0) return node.props.width * 0.5;\n          if (currentIndex > index) return width;\n          return width + node.props.width;\n        }, 0);\n      }\n      if (flexDirection === \"row\" && justifyContent === \"space-between\") {\n        if (width >= size.width) {\n          x = width * -0.5;\n          x += nodes.reduce((width, node, currentIndex) => {\n            if (currentIndex === 0) return node.props.width * 0.5;\n            if (currentIndex > index) return width;\n            return width + node.props.width;\n          }, 0);\n        } else {\n          let spacing =\n            nodes.length <= 1 ? 0 : (size.width - width) / (nodes.length - 1);\n          x = size.width * -0.5;\n          x += nodes.reduce((width, node, currentIndex) => {\n            if (currentIndex === 0) return node.props.width * 0.5;\n            if (currentIndex > index) return width;\n            return width + node.props.width + spacing;\n          }, 0);\n        }\n      }\n\n      /**\n       * row -> alignItems\n       */\n      if (flexDirection === \"row\" && alignItems === \"start\") {\n        y = size.height * 0.5 - child.props.height * 0.5;\n      }\n      if (flexDirection === \"row\" && alignItems === \"center\") {\n        // @todo test if calculation needs to be made for this\n      }\n      if (flexDirection === \"row\" && alignItems === \"end\") {\n        y = size.height * -0.5 + child.props.height * 0.5;\n      }\n      return [x, y, 0];\n    },\n    [nodes, size, flexDirection, alignItems, justifyContent]\n  );\n\n  return (\n    <group\n      ref={mergeRefs([groupRef, forwardedRef])}\n      key={key}\n      position={position}\n    >\n      <mesh renderOrder={renderOrder + zIndex}>\n        <planeBufferGeometry args={[size.width, size.height]} />\n        <meshBasicMaterial\n          color={backgroundColor}\n          transparent={true}\n          depthWrite={false}\n        />\n      </mesh>\n      <mesh renderOrder={renderOrder + zIndex} visible={texture !== undefined}>\n        <planeBufferGeometry args={[textureSize.width, textureSize.height]} />\n        <meshBasicMaterial\n          map={texture}\n          transparent={true}\n          depthWrite={false}\n          clippingPlanes={clippingPlanes}\n        />\n      </mesh>\n      {React.Children.map(children, (child, index) => {\n        return (\n          <group key={index} position={getChildPosition(child, index)}>\n            {child}\n          </group>\n        );\n      })}\n    </group>\n  );\n}\n\nexport default React.forwardRef(Surface);\n","import React from \"react\";\n\nexport default function useRenderKey(deps: React.DependencyList | undefined) {\n  const lastKey = React.useRef(0);\n\n  return React.useMemo(() => {\n    let key = ++lastKey.current;\n    if (key > 1000) {\n      key = 0;\n      lastKey.current = key;\n    }\n    return key;\n  }, deps);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport Surface from \"@/lib/components/surface\";\n\nconst CHILD_SIZE = 0.5;\n\nexport default function Layout() {\n  return (\n    <Canvas flat linear gl={{ localClippingEnabled: true }}>\n      {/** Cameras, controls and lights */}\n      <PerspectiveCamera makeDefault position={[0, 0, 5]} />\n      <OrbitControls makeDefault />\n      <ambientLight />\n\n      {/** Example */}\n\n      <Surface\n        backgroundColor=\"crimson\"\n        width={3}\n        height={3}\n        position={[0, 0, 0]}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/landscape.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/portrait.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n      </Surface>\n    </Canvas>\n  );\n}\n"],"names":["lastRenderOrder","Surface","forwardedRef","children","width","height","backgroundColor","backgroundImage","backgroundSize","zIndex","position","flexDirection","alignItems","justifyContent","gap","gl","useThree","state","size","React","texture","setTexture","undefined","THREE","loadAsync","then","anisotropy","capabilities","getMaxAnisotropy","surfaceRatio","imageRatioX","imageRatioY","image","clippingPlanes","setClippingPlanes","plane","clone","textureSize","setTextureSize","newSize","planes","set","groupRef","group","current","updateMatrixWorld","forEach","applyMatrix4","matrixWorld","renderOrder","key","deps","lastKey","useRenderKey","nodes","Array","isArray","getChildPosition","child","index","reduce","node","props","x","y","currentIndex","spacing","length","ref","mergeRefs","args","color","transparent","depthWrite","visible","map","CHILD_SIZE","Layout","flat","linear","localClippingEnabled","PerspectiveCamera","makeDefault","OrbitControls"],"sourceRoot":""}