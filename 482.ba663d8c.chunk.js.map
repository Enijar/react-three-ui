{"version":3,"file":"482.ba663d8c.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/lib/hooks/use-render-order.tsx","webpack://@app/client/./src/lib/components/surface.tsx","webpack://@app/client/./src/lib/hooks/use-render-key.tsx","webpack://@app/client/./src/examples/layout.tsx"],"sourcesContent":["import React from \"react\";\n\nlet lastRenderOrder = -1;\n\nexport default function useRenderOrder() {\n  return React.useMemo(() => {\n    return ++lastRenderOrder;\n  }, []);\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport useRenderOrder from \"@/lib/hooks/use-render-order\";\nimport useRenderKey from \"@/lib/hooks/use-render-key\";\nimport { useThree } from \"@react-three/fiber\";\n\ntype Props = {\n  children?: React.ReactNode;\n  width?: number;\n  height?: number;\n  backgroundColor?: THREE.ColorRepresentation;\n  backgroundImage?: string;\n  backgroundSize?: \"cover\" | \"contain\";\n  flexDirection?: \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\";\n  alignItems?: \"start\" | \"center\" | \"end\";\n  justifyContent?:\n    | \"start\"\n    | \"center\"\n    | \"end\"\n    | \"space-between\"\n    | \"space-evenly\"\n    | \"space-around\";\n  gap?: number;\n  zIndex?: number;\n  position?: [x: number, y: number, z: number];\n};\n\nconst DEFAULT_POSITION: Props[\"position\"] = [0, 0, 0];\n\nexport default function Surface({\n  children,\n  width = 1,\n  height = 1,\n  backgroundColor = \"black\",\n  backgroundImage,\n  backgroundSize,\n  zIndex = 0,\n  position = DEFAULT_POSITION,\n  flexDirection = \"row\",\n  alignItems = \"start\",\n  justifyContent = \"start\",\n  gap = 0,\n}: Props) {\n  const gl = useThree((state) => state.gl);\n\n  // Set geometry size from `width` and `height` props\n  const size = React.useMemo(() => {\n    return { width, height };\n  }, [width, height]);\n\n  // Set material texture from `backgroundImage` prop\n  const [texture, setTexture] = React.useState<THREE.Texture>(undefined);\n  React.useMemo(() => {\n    if (backgroundImage === undefined) return;\n    new THREE.TextureLoader().loadAsync(backgroundImage).then(setTexture);\n  }, [backgroundImage]);\n\n  // Set texture `anisotropy` to max available (prevents blurriness)\n  // when viewing at an angle\n  React.useMemo(() => {\n    if (texture === undefined) return;\n    texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n  }, [texture, gl]);\n\n  const [surfaceRatio, imageRatioX, imageRatioY] = React.useMemo(() => {\n    const surfaceRatio = size.width / size.height;\n    if (texture === undefined) {\n      return [surfaceRatio, surfaceRatio, surfaceRatio];\n    }\n    const imageRatioX = texture.image.width / texture.image.height;\n    const imageRatioY = texture.image.height / texture.image.width;\n    return [surfaceRatio, imageRatioX, imageRatioY];\n  }, [texture, size]);\n\n  const planes = React.useMemo(() => {\n    const plane = new THREE.Plane(new THREE.Vector3(), 1);\n    return [plane.clone(), plane.clone(), plane.clone(), plane.clone()];\n  }, []);\n\n  const [textureSize, textureClippingPlanes] = React.useMemo(() => {\n    if (texture === undefined) return [size, planes];\n\n    const newSize = { ...size };\n\n    // @todo find a way to simplify this\n\n    if (backgroundSize === \"contain\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      } else {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      }\n    }\n\n    if (backgroundSize === \"cover\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      } else {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      }\n    }\n\n    planes[0].set(new THREE.Vector3(0, -1, 0), size.height * 0.5);\n    planes[1].set(new THREE.Vector3(1, 0, 0), size.width * 0.5);\n    planes[2].set(new THREE.Vector3(0, 1, 0), size.height * 0.5);\n    planes[3].set(new THREE.Vector3(-1, 0, 0), size.width * 0.5);\n\n    return [newSize, planes];\n  }, [\n    planes,\n    texture,\n    size,\n    backgroundSize,\n    imageRatioX,\n    imageRatioY,\n    surfaceRatio,\n  ]);\n\n  const renderOrder = useRenderOrder();\n  const key = useRenderKey([texture]);\n\n  const groupRef = React.useRef<THREE.Group>(null);\n\n  React.useEffect(() => {\n    const group = groupRef.current;\n    if (group === null) return;\n    group.updateMatrixWorld(true);\n    planes.forEach((plane) => {\n      plane.applyMatrix4(group.matrixWorld);\n    });\n  }, [position, planes]);\n\n  return (\n    <group key={key}>\n      <group ref={groupRef} position={position}>\n        <mesh renderOrder={renderOrder + zIndex}>\n          <planeBufferGeometry args={[size.width, size.height]} />\n          <meshBasicMaterial\n            color={backgroundColor}\n            transparent={true}\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh\n          renderOrder={renderOrder + zIndex}\n          visible={texture !== undefined}\n        >\n          <planeBufferGeometry args={[textureSize.width, textureSize.height]} />\n          <meshBasicMaterial\n            map={texture}\n            transparent={true}\n            depthWrite={false}\n            clippingPlanes={textureClippingPlanes}\n            clipIntersection={true}\n          />\n        </mesh>\n      </group>\n      {children}\n    </group>\n  );\n}\n","import React from \"react\";\n\nexport default function useRenderKey(deps: React.DependencyList | undefined) {\n  const lastKey = React.useRef(0);\n\n  return React.useMemo(() => {\n    let key = ++lastKey.current;\n    if (key > 1000) {\n      key = 0;\n      lastKey.current = key;\n    }\n    return key;\n  }, deps);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport Surface from \"@/lib/components/surface\";\n\nexport default function Layout() {\n  return (\n    <Canvas flat linear gl={{ localClippingEnabled: true }}>\n      {/** Cameras, controls and lights */}\n      <PerspectiveCamera makeDefault position={[0, 0, 5]} />\n      <OrbitControls makeDefault />\n      <ambientLight />\n\n      {/** Example */}\n\n      <Surface backgroundColor=\"crimson\" width={3} height={3}>\n        <Surface\n          position={[-0.5, 0, 0]}\n          width={1}\n          height={1}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n      </Surface>\n    </Canvas>\n  );\n}\n"],"names":["lastRenderOrder","DEFAULT_POSITION","Surface","children","width","height","backgroundColor","backgroundImage","backgroundSize","zIndex","position","flexDirection","alignItems","justifyContent","gap","gl","useThree","state","size","React","texture","setTexture","undefined","THREE","loadAsync","then","anisotropy","capabilities","getMaxAnisotropy","surfaceRatio","imageRatioX","imageRatioY","image","planes","plane","clone","textureSize","textureClippingPlanes","newSize","set","renderOrder","key","deps","lastKey","current","useRenderKey","groupRef","group","updateMatrixWorld","forEach","applyMatrix4","matrixWorld","ref","args","color","transparent","depthWrite","visible","map","clippingPlanes","clipIntersection","Layout","flat","linear","localClippingEnabled","PerspectiveCamera","makeDefault","OrbitControls"],"sourceRoot":""}