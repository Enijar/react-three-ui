{"version":3,"file":"473.bfba2f3c.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/components/example.tsx","webpack://@app/client/./src/examples/flexbox.tsx","webpack://@app/client/./src/lib/components/surface.tsx","webpack://@app/client/./src/lib/hooks/use-render-key.tsx","webpack://@app/client/./src/lib/hooks/use-render-order.tsx"],"sourcesContent":["import React from \"react\";\nimport { BoxLineGeometry } from \"three/examples/jsm/geometries/BoxLineGeometry\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\nexport default function Example({ children }: Props) {\n  const room = React.useMemo(() => {\n    return new BoxLineGeometry(6, 6, 6, 10, 10, 10).translate(0, 3, 0);\n  }, []);\n\n  return (\n    <Canvas legacy flat linear gl={{ localClippingEnabled: true }}>\n      {/** Cameras, controls and lights */}\n      <PerspectiveCamera makeDefault position={[0, 1.6, 0]} />\n      <OrbitControls makeDefault target={[0, 1, -1.8]} />\n      <ambientLight />\n\n      <lineSegments geometry={room}>\n        <lineBasicMaterial color=\"#c0c0c0\" />\n      </lineSegments>\n\n      <group position={[0, 1, -1.88]}>{children}</group>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport Example from \"@/components/example\";\nimport Surface from \"@/lib/components/surface\";\n\nexport default function Flexbox() {\n  return (\n    <Example>\n      <Surface\n        position={[-0.52, 0, 0]}\n        backgroundColor=\"#777777\"\n        width={1}\n        height={1}\n        justifyContent=\"space-between\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        <Surface width={0.3} height={0.3} backgroundColor=\"red\" />\n        <Surface width={0.3} height={0.3} backgroundColor=\"green\" />\n        <Surface width={0.3} height={0.3} backgroundColor=\"blue\" />\n      </Surface>\n      <Surface\n        position={[0.52, 0, 0]}\n        backgroundColor=\"#777777\"\n        width={1}\n        height={1}\n        justifyContent=\"space-around\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n      >\n        <Surface width={0.3} height={0.3} backgroundColor=\"red\" />\n        <Surface width={0.3} height={0.3} backgroundColor=\"green\" />\n        <Surface width={0.3} height={0.3} backgroundColor=\"blue\" />\n      </Surface>\n    </Example>\n  );\n}\n","import React from \"react\";\nimport { mergeRefs } from \"react-merge-refs\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { ThreeEvent } from \"@react-three/fiber/dist/declarations/src/core/events\";\nimport useRenderOrder from \"@/lib/hooks/use-render-order\";\nimport useRenderKey from \"@/lib/hooks/use-render-key\";\n\ntype Props = {\n  children?: React.ReactNode;\n  width?: number;\n  height?: number;\n  backgroundColor?: THREE.ColorRepresentation;\n  backgroundImage?: string;\n  backgroundSize?: \"cover\" | \"contain\";\n  flexDirection?: \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\";\n  alignItems?: \"start\" | \"center\" | \"end\";\n  justifyContent?:\n    | \"start\"\n    | \"center\"\n    | \"end\"\n    | \"space-between\"\n    | \"space-around\";\n  gap?: number;\n  zIndex?: number;\n  position?: [x: number, y: number, z: number];\n  rotation?: [x: number, y: number, z: number];\n  onClick?: (event: ThreeEvent<MouseEvent>) => void;\n  onContextMenu?: (event: ThreeEvent<MouseEvent>) => void;\n  onDoubleClick?: (event: ThreeEvent<MouseEvent>) => void;\n  onPointerUp?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerDown?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerOver?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerOut?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerEnter?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerLeave?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerMove?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerMissed?: (event: MouseEvent) => void;\n  onPointerCancel?: (event: ThreeEvent<PointerEvent>) => void;\n  onWheel?: (event: ThreeEvent<WheelEvent>) => void;\n};\n\nfunction Surface(\n  {\n    children,\n    width = 1,\n    height = 1,\n    backgroundColor = \"black\",\n    backgroundImage,\n    backgroundSize,\n    zIndex = 0,\n    position,\n    rotation,\n    flexDirection = \"row\",\n    alignItems = \"start\",\n    justifyContent = \"start\",\n    gap = 0,\n    onClick,\n    onContextMenu,\n    onDoubleClick,\n    onPointerUp,\n    onPointerDown,\n    onPointerOver,\n    onPointerOut,\n    onPointerEnter,\n    onPointerLeave,\n    onPointerMove,\n    onPointerMissed,\n    onPointerCancel,\n    onWheel,\n  }: Props,\n  forwardedRef: React.ForwardedRef<THREE.Group>\n) {\n  const gl = useThree((state) => state.gl);\n\n  // Set geometry size from `width` and `height` props\n  const size = React.useMemo(() => {\n    return { width, height };\n  }, [width, height]);\n\n  // Set material texture from `backgroundImage` prop\n  const [texture, setTexture] = React.useState<THREE.Texture>(undefined);\n  React.useMemo(() => {\n    if (backgroundImage === undefined) return;\n    new THREE.TextureLoader().loadAsync(backgroundImage).then(setTexture);\n  }, [backgroundImage]);\n\n  // Set texture `anisotropy` to max available (prevents blurriness)\n  // when viewing at an angle\n  React.useMemo(() => {\n    if (texture === undefined) return;\n    texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n  }, [texture, gl]);\n\n  const [surfaceRatio, imageRatioX, imageRatioY] = React.useMemo(() => {\n    const surfaceRatio = size.width / size.height;\n    if (texture === undefined) {\n      return [surfaceRatio, surfaceRatio, surfaceRatio];\n    }\n    const imageRatioX = texture.image.width / texture.image.height;\n    const imageRatioY = texture.image.height / texture.image.width;\n    return [surfaceRatio, imageRatioX, imageRatioY];\n  }, [texture, size]);\n\n  const [clippingPlanes, setClippingPlanes] = React.useState<THREE.Plane[]>(\n    () => {\n      const plane = new THREE.Plane(new THREE.Vector3(), 1);\n      return [plane.clone(), plane.clone(), plane.clone(), plane.clone()];\n    }\n  );\n\n  const [textureSize, setTextureSize] = React.useState(() => {\n    return { ...size };\n  });\n\n  const nodes = React.useMemo(() => {\n    if (children === undefined) return [];\n    if (!Array.isArray(children)) return [children];\n    return children;\n  }, [children]);\n\n  const vec = React.useMemo(() => {\n    return new THREE.Vector2(0, 0);\n  }, []);\n\n  const getChildPosition = React.useCallback(\n    // @todo fix types\n    (index: number): Props[\"position\"] => {\n      if (nodes[index].displayName !== \"surface\") return [0, 0, 0];\n      // @todo simplify this\n      const width = nodes.reduce((width, node) => width + node.props.width, 0);\n      const height = nodes.reduce(\n        (height, node) => height + node.props.height,\n        0\n      );\n\n      vec.set(0, 0);\n\n      let contentSize = width;\n\n      type Axis = \"width\" | \"height\";\n\n      let axis: Axis = \"width\";\n      let axisInverted: Axis = \"height\";\n      if (flexDirection === \"column\") {\n        axis = \"height\";\n        axisInverted = \"width\";\n        contentSize = height;\n      }\n\n      if (\n        nodes.length > 0 &&\n        ![\"space-between\", \"space-around\"].includes(justifyContent)\n      ) {\n        contentSize += gap * (nodes.length - 1);\n      }\n\n      /**\n       * justifyContent\n       */\n      if (justifyContent === \"start\") {\n        vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"center\") {\n        vec.x = nodes[0].props[axis] * 0.5 - contentSize * 0.5;\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"end\") {\n        vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - contentSize;\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"space-between\") {\n        if (contentSize >= size[axis]) {\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5;\n          }\n        } else {\n          let spacing = Math.max(0, size[axis] - contentSize);\n          if (nodes.length === 0) {\n            spacing = 0;\n          } else if (spacing > 0) {\n            spacing /= nodes.length - 1;\n          }\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 +\n              nodes[i].props[axis] * 0.5 +\n              spacing;\n          }\n        }\n      }\n      if (justifyContent === \"space-around\") {\n        if (contentSize >= size[axis]) {\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5;\n          }\n        } else {\n          let spacing = Math.max(0, size[axis] - contentSize);\n          if (nodes.length === 0) {\n            spacing = 0;\n          } else if (spacing > 0) {\n            spacing /= nodes.length + 1;\n          }\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          vec.x += spacing;\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 +\n              nodes[i].props[axis] * 0.5 +\n              spacing;\n          }\n        }\n      }\n\n      /**\n       * alignItems\n       */\n      if (alignItems === \"start\") {\n        if (flexDirection === \"row\") {\n          vec.y =\n            size[axisInverted] * 0.5 - nodes[index].props[axisInverted] * 0.5;\n        }\n        if (flexDirection === \"column\") {\n          vec.y =\n            size[axisInverted] * -0.5 + nodes[index].props[axisInverted] * 0.5;\n        }\n      }\n      if (alignItems === \"center\") {\n        // No calculation needed\n      }\n      if (alignItems === \"end\") {\n        if (flexDirection === \"row\") {\n          vec.y =\n            size[axisInverted] * -0.5 + nodes[index].props[axisInverted] * 0.5;\n        }\n        if (flexDirection === \"column\") {\n          vec.y =\n            size[axisInverted] * 0.5 - nodes[index].props[axisInverted] * 0.5;\n        }\n      }\n\n      if (flexDirection === \"column\") {\n        return [vec.y, vec.x, 0];\n      }\n\n      return [vec.x, vec.y, 0];\n    },\n    [nodes, size, flexDirection, alignItems, justifyContent, gap, vec]\n  );\n\n  const [childPositions, setChildPositions] = React.useState<\n    Props[\"position\"][]\n  >(() => {\n    return nodes.map((node, index) => getChildPosition(index));\n  });\n\n  React.useEffect(() => {\n    setChildPositions(nodes.map((node, index) => getChildPosition(index)));\n  }, [nodes, getChildPosition]);\n\n  React.useEffect(() => {\n    if (texture === undefined) return;\n\n    const newSize = { ...size };\n\n    if (backgroundSize === \"contain\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      } else {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      }\n    }\n\n    if (backgroundSize === \"cover\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      } else {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      }\n    }\n\n    setTextureSize(newSize);\n    setClippingPlanes((planes) => {\n      planes[0].set(new THREE.Vector3(0, -1, 0), size.height * 0.5);\n      planes[1].set(new THREE.Vector3(1, 0, 0), size.width * 0.5);\n      planes[2].set(new THREE.Vector3(0, 1, 0), size.height * 0.5);\n      planes[3].set(new THREE.Vector3(-1, 0, 0), size.width * 0.5);\n      return [...planes];\n    });\n  }, [\n    rotation,\n    position,\n    childPositions,\n    texture,\n    size,\n    backgroundSize,\n    imageRatioX,\n    imageRatioY,\n    surfaceRatio,\n  ]);\n\n  const groupRef = React.useRef<THREE.Group>(null);\n\n  React.useEffect(() => {\n    const group = groupRef.current;\n    if (group === null) return;\n    group.updateMatrixWorld(true);\n    clippingPlanes.forEach((plane) => {\n      plane.applyMatrix4(group.matrixWorld);\n    });\n  }, [rotation, position, childPositions, clippingPlanes]);\n\n  const renderOrder = useRenderOrder();\n  const key = useRenderKey([\n    childPositions,\n    texture,\n    rotation,\n    position,\n    children,\n    textureSize,\n    clippingPlanes,\n  ]);\n\n  return (\n    <group\n      ref={mergeRefs([groupRef, forwardedRef])}\n      key={key}\n      rotation={rotation}\n      position={position}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onDoubleClick={onDoubleClick}\n      onPointerUp={onPointerUp}\n      onPointerDown={onPointerDown}\n      onPointerOver={onPointerOver}\n      onPointerOut={onPointerOut}\n      onPointerEnter={onPointerEnter}\n      onPointerLeave={onPointerLeave}\n      onPointerMove={onPointerMove}\n      onPointerMissed={onPointerMissed}\n      onPointerCancel={onPointerCancel}\n      onWheel={onWheel}\n    >\n      <mesh renderOrder={renderOrder + zIndex}>\n        <planeBufferGeometry args={[size.width, size.height]} />\n        <meshBasicMaterial\n          color={backgroundColor}\n          transparent={true}\n          depthWrite={false}\n        />\n      </mesh>\n      <mesh renderOrder={renderOrder + zIndex} visible={texture !== undefined}>\n        <planeBufferGeometry args={[textureSize.width, textureSize.height]} />\n        <meshBasicMaterial\n          map={texture}\n          transparent={true}\n          depthWrite={false}\n          clippingPlanes={clippingPlanes}\n        />\n      </mesh>\n      {React.Children.map(children, (child, index) => {\n        return (\n          <group key={index} position={childPositions[index]}>\n            {child}\n          </group>\n        );\n      })}\n    </group>\n  );\n}\n\nconst Component = React.forwardRef(Surface);\n\nComponent.displayName = \"surface\";\n\nexport default Component;\n","import React from \"react\";\n\nexport default function useRenderKey(deps: React.DependencyList | undefined) {\n  const lastKey = React.useRef(0);\n\n  return React.useMemo(() => {\n    let key = ++lastKey.current;\n    if (key > 1000) {\n      key = 0;\n      lastKey.current = key;\n    }\n    return key;\n  }, deps);\n}\n","import React from \"react\";\n\nlet lastRenderOrder = -1;\n\nexport default function useRenderOrder() {\n  return React.useMemo(() => {\n    return ++lastRenderOrder;\n  }, []);\n}\n"],"names":["Example","children","room","React","BoxLineGeometry","translate","legacy","flat","linear","gl","localClippingEnabled","makeDefault","position","target","geometry","color","Flexbox","backgroundColor","width","height","justifyContent","flexDirection","alignItems","Surface","forwardedRef","backgroundImage","backgroundSize","zIndex","rotation","gap","onClick","onContextMenu","onDoubleClick","onPointerUp","onPointerDown","onPointerOver","onPointerOut","onPointerEnter","onPointerLeave","onPointerMove","onPointerMissed","onPointerCancel","onWheel","useThree","state","size","texture","setTexture","undefined","THREE","loadAsync","then","anisotropy","capabilities","getMaxAnisotropy","surfaceRatio","imageRatioX","imageRatioY","image","clippingPlanes","setClippingPlanes","plane","clone","textureSize","setTextureSize","nodes","Array","isArray","vec","getChildPosition","index","displayName","reduce","node","props","set","contentSize","axis","axisInverted","length","includes","x","i","spacing","Math","max","y","childPositions","setChildPositions","map","newSize","planes","groupRef","group","current","updateMatrixWorld","forEach","applyMatrix4","matrixWorld","renderOrder","useRenderOrder","key","useRenderKey","ref","mergeRefs","args","transparent","depthWrite","visible","child","Component","deps","lastKey","lastRenderOrder"],"sourceRoot":""}