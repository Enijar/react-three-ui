{"version":3,"file":"482.46eaef81.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/lib/hooks/use-render-order.tsx","webpack://@app/client/./src/lib/components/surface.tsx","webpack://@app/client/./src/lib/hooks/use-render-key.tsx","webpack://@app/client/./src/examples/layout.tsx"],"sourcesContent":["import React from \"react\";\n\nlet lastRenderOrder = -1;\n\nexport default function useRenderOrder() {\n  return React.useMemo(() => {\n    return ++lastRenderOrder;\n  }, []);\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport useRenderOrder from \"@/lib/hooks/use-render-order\";\nimport useRenderKey from \"@/lib/hooks/use-render-key\";\nimport { useThree } from \"@react-three/fiber\";\n\ntype Props = {\n  children?: React.ReactNode;\n  width?: number;\n  height?: number;\n  backgroundColor?: THREE.ColorRepresentation;\n  backgroundImage?: string;\n  backgroundSize?: \"cover\" | \"contain\";\n  zIndex?: number;\n};\n\nexport default function Surface({\n  children,\n  width = 1,\n  height = 1,\n  backgroundColor = \"black\",\n  backgroundImage,\n  backgroundSize,\n  zIndex = 0,\n}: Props) {\n  const gl = useThree((state) => state.gl);\n\n  // Set geometry size from `width` and `height` props\n  const size = React.useMemo(() => {\n    return { width, height };\n  }, [width, height]);\n\n  // Set material texture from `backgroundImage` prop\n  const [texture, setTexture] = React.useState<THREE.Texture>(undefined);\n  React.useMemo(() => {\n    if (backgroundImage === undefined) return;\n    new THREE.TextureLoader().loadAsync(backgroundImage).then(setTexture);\n  }, [backgroundImage]);\n\n  // Set texture `anisotropy` to max available (prevents blurriness)\n  // when viewing at an angle\n  React.useMemo(() => {\n    if (texture === undefined) return;\n    texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n  }, [texture, gl]);\n\n  const [surfaceRatio, imageRatioX, imageRatioY] = React.useMemo(() => {\n    const surfaceRatio = size.width / size.height;\n    if (texture === undefined) {\n      return [surfaceRatio, surfaceRatio, surfaceRatio];\n    }\n    const imageRatioX = texture.image.width / texture.image.height;\n    const imageRatioY = texture.image.height / texture.image.width;\n    return [surfaceRatio, imageRatioX, imageRatioY];\n  }, [texture, size]);\n\n  const planes = React.useMemo(() => {\n    const plane = new THREE.Plane(new THREE.Vector3(), 1);\n    return [plane.clone(), plane.clone(), plane.clone(), plane.clone()];\n  }, []);\n\n  const [textureSize, textureClippingPlanes] = React.useMemo(() => {\n    if (texture === undefined) return [size, planes];\n\n    const newSize = { ...size };\n\n    // @todo find a way to simplify this\n\n    if (backgroundSize === \"contain\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      } else {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      }\n    }\n\n    if (backgroundSize === \"cover\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      } else {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      }\n    }\n\n    planes[0].set(new THREE.Vector3(0, -1, 0), size.height * 0.5);\n    planes[1].set(new THREE.Vector3(1, 0, 0), size.width * 0.5);\n    planes[2].set(new THREE.Vector3(0, 1, 0), size.height * 0.5);\n    planes[3].set(new THREE.Vector3(-1, 0, 0), size.width * 0.5);\n\n    return [newSize, planes];\n  }, [\n    planes,\n    texture,\n    size,\n    backgroundSize,\n    imageRatioX,\n    imageRatioY,\n    surfaceRatio,\n  ]);\n\n  const renderOrder = useRenderOrder();\n  const key = useRenderKey([texture]);\n\n  return (\n    <group key={key}>\n      <mesh renderOrder={renderOrder + zIndex}>\n        <planeBufferGeometry args={[size.width, size.height]} />\n        <meshBasicMaterial\n          color={backgroundColor}\n          transparent={true}\n          depthWrite={false}\n        />\n      </mesh>\n      <mesh visible={texture !== undefined} renderOrder={renderOrder + zIndex}>\n        <planeBufferGeometry args={[textureSize.width, textureSize.height]} />\n        <meshBasicMaterial\n          map={texture}\n          transparent={true}\n          depthWrite={false}\n          clippingPlanes={textureClippingPlanes}\n        />\n      </mesh>\n      {children}\n    </group>\n  );\n}\n","import React from \"react\";\n\nexport default function useRenderKey(deps: React.DependencyList | undefined) {\n  const lastKey = React.useRef(0);\n\n  return React.useMemo(() => {\n    let key = ++lastKey.current;\n    if (key > 1000) {\n      key = 0;\n      lastKey.current = key;\n    }\n    return key;\n  }, deps);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport Surface from \"@/lib/components/surface\";\n\nexport default function Layout() {\n  return (\n    <Canvas flat linear gl={{ localClippingEnabled: true }}>\n      {/** Cameras, controls and lights */}\n      <PerspectiveCamera makeDefault position={[0, 0, 5]} />\n      <OrbitControls makeDefault />\n      <ambientLight />\n\n      {/** Example */}\n\n      <Surface backgroundColor=\"crimson\" width={3} height={3}>\n        <Surface\n          width={1.5}\n          height={1.5}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n      </Surface>\n    </Canvas>\n  );\n}\n"],"names":["lastRenderOrder","Surface","children","width","height","backgroundColor","backgroundImage","backgroundSize","zIndex","gl","useThree","state","size","React","texture","setTexture","undefined","THREE","loadAsync","then","anisotropy","capabilities","getMaxAnisotropy","surfaceRatio","imageRatioX","imageRatioY","image","planes","plane","clone","textureSize","textureClippingPlanes","newSize","set","renderOrder","key","deps","lastKey","current","useRenderKey","args","color","transparent","depthWrite","visible","map","clippingPlanes","Layout","flat","linear","localClippingEnabled","PerspectiveCamera","makeDefault","position","OrbitControls"],"sourceRoot":""}