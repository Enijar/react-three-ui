{"version":3,"file":"482.d61744c6.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/lib/hooks/use-render-order.tsx","webpack://@app/client/./src/lib/components/surface.tsx","webpack://@app/client/./src/lib/hooks/use-render-key.tsx","webpack://@app/client/./src/examples/layout.tsx"],"sourcesContent":["import React from \"react\";\n\nlet lastRenderOrder = -1;\n\nexport default function useRenderOrder() {\n  return React.useMemo(() => {\n    return ++lastRenderOrder;\n  }, []);\n}\n","import React from \"react\";\nimport { mergeRefs } from \"react-merge-refs\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { ThreeEvent } from \"@react-three/fiber/dist/declarations/src/core/events\";\nimport useRenderOrder from \"@/lib/hooks/use-render-order\";\nimport useRenderKey from \"@/lib/hooks/use-render-key\";\n\ntype Props = {\n  children?: React.ReactNode;\n  width?: number;\n  height?: number;\n  backgroundColor?: THREE.ColorRepresentation;\n  backgroundImage?: string;\n  backgroundSize?: \"cover\" | \"contain\";\n  flexDirection?: \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\";\n  alignItems?: \"start\" | \"center\" | \"end\";\n  justifyContent?:\n    | \"start\"\n    | \"center\"\n    | \"end\"\n    | \"space-between\"\n    | \"space-around\";\n  gap?: number;\n  zIndex?: number;\n  position?: [x: number, y: number, z: number];\n  onClick?: (event: ThreeEvent<MouseEvent>) => void;\n  onContextMenu?: (event: ThreeEvent<MouseEvent>) => void;\n  onDoubleClick?: (event: ThreeEvent<MouseEvent>) => void;\n  onPointerUp?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerDown?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerOver?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerOut?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerEnter?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerLeave?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerMove?: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerMissed?: (event: MouseEvent) => void;\n  onPointerCancel?: (event: ThreeEvent<PointerEvent>) => void;\n  onWheel?: (event: ThreeEvent<WheelEvent>) => void;\n};\n\nfunction Surface(\n  {\n    children,\n    width = 1,\n    height = 1,\n    backgroundColor = \"black\",\n    backgroundImage,\n    backgroundSize,\n    zIndex = 0,\n    position,\n    flexDirection = \"row\",\n    alignItems = \"start\",\n    justifyContent = \"start\",\n    gap = 0,\n    onClick,\n    onContextMenu,\n    onDoubleClick,\n    onPointerUp,\n    onPointerDown,\n    onPointerOver,\n    onPointerOut,\n    onPointerEnter,\n    onPointerLeave,\n    onPointerMove,\n    onPointerMissed,\n    onPointerCancel,\n    onWheel,\n  }: Props,\n  forwardedRef: React.ForwardedRef<THREE.Group>\n) {\n  const gl = useThree((state) => state.gl);\n\n  // Set geometry size from `width` and `height` props\n  const size = React.useMemo(() => {\n    return { width, height };\n  }, [width, height]);\n\n  // Set material texture from `backgroundImage` prop\n  const [texture, setTexture] = React.useState<THREE.Texture>(undefined);\n  React.useMemo(() => {\n    if (backgroundImage === undefined) return;\n    new THREE.TextureLoader().loadAsync(backgroundImage).then(setTexture);\n  }, [backgroundImage]);\n\n  // Set texture `anisotropy` to max available (prevents blurriness)\n  // when viewing at an angle\n  React.useMemo(() => {\n    if (texture === undefined) return;\n    texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n  }, [texture, gl]);\n\n  const [surfaceRatio, imageRatioX, imageRatioY] = React.useMemo(() => {\n    const surfaceRatio = size.width / size.height;\n    if (texture === undefined) {\n      return [surfaceRatio, surfaceRatio, surfaceRatio];\n    }\n    const imageRatioX = texture.image.width / texture.image.height;\n    const imageRatioY = texture.image.height / texture.image.width;\n    return [surfaceRatio, imageRatioX, imageRatioY];\n  }, [texture, size]);\n\n  const [clippingPlanes, setClippingPlanes] = React.useState<THREE.Plane[]>(\n    () => {\n      const plane = new THREE.Plane(new THREE.Vector3(), 1);\n      return [plane.clone(), plane.clone(), plane.clone(), plane.clone()];\n    }\n  );\n\n  const [textureSize, setTextureSize] = React.useState(() => {\n    return { ...size };\n  });\n\n  React.useEffect(() => {\n    if (texture === undefined) return;\n\n    const newSize = { ...size };\n\n    if (backgroundSize === \"contain\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      } else {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      }\n    }\n\n    if (backgroundSize === \"cover\") {\n      if (imageRatioX >= surfaceRatio) {\n        newSize.height = size.height;\n        newSize.width = newSize.height * imageRatioX;\n      } else {\n        newSize.width = size.width;\n        newSize.height = newSize.width * imageRatioY;\n      }\n    }\n\n    setTextureSize(newSize);\n    setClippingPlanes((planes) => {\n      planes[0].set(new THREE.Vector3(0, -1, 0), size.height * 0.5);\n      planes[1].set(new THREE.Vector3(1, 0, 0), size.width * 0.5);\n      planes[2].set(new THREE.Vector3(0, 1, 0), size.height * 0.5);\n      planes[3].set(new THREE.Vector3(-1, 0, 0), size.width * 0.5);\n      return [...planes];\n    });\n  }, [\n    position,\n    texture,\n    size,\n    backgroundSize,\n    imageRatioX,\n    imageRatioY,\n    surfaceRatio,\n  ]);\n\n  const groupRef = React.useRef<THREE.Group>(null);\n\n  React.useEffect(() => {\n    const group = groupRef.current;\n    if (group === null) return;\n    group.updateMatrixWorld(true);\n    clippingPlanes.forEach((plane) => {\n      plane.applyMatrix4(group.matrixWorld);\n    });\n  }, [position, clippingPlanes]);\n\n  const renderOrder = useRenderOrder();\n  const key = useRenderKey([\n    texture,\n    position,\n    children,\n    textureSize,\n    clippingPlanes,\n  ]);\n\n  const nodes = React.useMemo(() => {\n    if (children === undefined) return [];\n    if (!Array.isArray(children)) return [children];\n    return children;\n  }, [children]);\n\n  const vec = React.useMemo(() => {\n    return new THREE.Vector2(0, 0);\n  }, []);\n\n  const getChildPosition = React.useCallback(\n    // @todo fix types\n    (child: any, index: number): Props[\"position\"] => {\n      // @todo simplify this\n      const width = nodes.reduce((width, node) => width + node.props.width, 0);\n      const height = nodes.reduce(\n        (height, node) => height + node.props.height,\n        0\n      );\n\n      vec.set(0, 0);\n\n      let contentSize = width;\n\n      type Axis = \"width\" | \"height\";\n\n      let axis: Axis = \"width\";\n      let axisInverted: Axis = \"height\";\n      if (flexDirection === \"column\") {\n        axis = \"height\";\n        axisInverted = \"width\";\n        contentSize = height;\n      }\n\n      if (\n        nodes.length > 0 &&\n        ![\"space-between\", \"space-around\"].includes(justifyContent)\n      ) {\n        contentSize += gap * (nodes.length - 1);\n      }\n\n      /**\n       * justifyContent\n       */\n      if (justifyContent === \"start\") {\n        vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"center\") {\n        vec.x = nodes[0].props[axis] * 0.5 - contentSize * 0.5;\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"end\") {\n        vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - contentSize;\n        for (let i = 1; i <= index; i++) {\n          vec.x +=\n            nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5 + gap;\n        }\n      }\n      if (justifyContent === \"space-between\") {\n        if (contentSize >= size[axis]) {\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5;\n          }\n        } else {\n          let spacing = Math.max(0, size[axis] - contentSize);\n          if (nodes.length === 0) {\n            spacing = 0;\n          } else if (spacing > 0) {\n            spacing /= nodes.length - 1;\n          }\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 +\n              nodes[i].props[axis] * 0.5 +\n              spacing;\n          }\n        }\n      }\n      if (justifyContent === \"space-around\") {\n        if (contentSize >= size[axis]) {\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 + nodes[i].props[axis] * 0.5;\n          }\n        } else {\n          let spacing = Math.max(0, size[axis] - contentSize);\n          if (nodes.length === 0) {\n            spacing = 0;\n          } else if (spacing > 0) {\n            spacing /= nodes.length + 1;\n          }\n          vec.x = size[axis] * 0.5 + nodes[0].props[axis] * 0.5 - size[axis];\n          vec.x += spacing;\n          for (let i = 1; i <= index; i++) {\n            vec.x +=\n              nodes[i - 1].props[axis] * 0.5 +\n              nodes[i].props[axis] * 0.5 +\n              spacing;\n          }\n        }\n      }\n\n      /**\n       * alignItems\n       */\n      if (alignItems === \"start\") {\n        if (flexDirection === \"row\") {\n          vec.y = size[axisInverted] * 0.5 - child.props[axisInverted] * 0.5;\n        }\n        if (flexDirection === \"column\") {\n          vec.y = size[axisInverted] * -0.5 + child.props[axisInverted] * 0.5;\n        }\n      }\n      if (alignItems === \"center\") {\n        // No calculation needed\n      }\n      if (alignItems === \"end\") {\n        if (flexDirection === \"row\") {\n          vec.y = size[axisInverted] * -0.5 + child.props[axisInverted] * 0.5;\n        }\n        if (flexDirection === \"column\") {\n          vec.y = size[axisInverted] * 0.5 - child.props[axisInverted] * 0.5;\n        }\n      }\n\n      if (flexDirection === \"column\") {\n        return [vec.y, vec.x, 0];\n      }\n\n      return [vec.x, vec.y, 0];\n    },\n    [nodes, size, flexDirection, alignItems, justifyContent, gap, vec]\n  );\n\n  return (\n    <group\n      ref={mergeRefs([groupRef, forwardedRef])}\n      key={key}\n      position={position}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onDoubleClick={onDoubleClick}\n      onPointerUp={onPointerUp}\n      onPointerDown={onPointerDown}\n      onPointerOver={onPointerOver}\n      onPointerOut={onPointerOut}\n      onPointerEnter={onPointerEnter}\n      onPointerLeave={onPointerLeave}\n      onPointerMove={onPointerMove}\n      onPointerMissed={onPointerMissed}\n      onPointerCancel={onPointerCancel}\n      onWheel={onWheel}\n    >\n      <mesh renderOrder={renderOrder + zIndex}>\n        <planeBufferGeometry args={[size.width, size.height]} />\n        <meshBasicMaterial\n          color={backgroundColor}\n          transparent={true}\n          depthWrite={false}\n        />\n      </mesh>\n      <mesh renderOrder={renderOrder + zIndex} visible={texture !== undefined}>\n        <planeBufferGeometry args={[textureSize.width, textureSize.height]} />\n        <meshBasicMaterial\n          map={texture}\n          transparent={true}\n          depthWrite={false}\n          clippingPlanes={clippingPlanes}\n        />\n      </mesh>\n      {React.Children.map(children, (child, index) => {\n        return (\n          <group key={index} position={getChildPosition(child, index)}>\n            {child}\n          </group>\n        );\n      })}\n    </group>\n  );\n}\n\nexport default React.forwardRef(Surface);\n","import React from \"react\";\n\nexport default function useRenderKey(deps: React.DependencyList | undefined) {\n  const lastKey = React.useRef(0);\n\n  return React.useMemo(() => {\n    let key = ++lastKey.current;\n    if (key > 1000) {\n      key = 0;\n      lastKey.current = key;\n    }\n    return key;\n  }, deps);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport Surface from \"@/lib/components/surface\";\n\nconst CHILD_SIZE = 0.5;\n\nexport default function Layout() {\n  return (\n    <Canvas flat linear gl={{ localClippingEnabled: true }}>\n      {/** Cameras, controls and lights */}\n      <PerspectiveCamera makeDefault position={[0, 0, 5]} />\n      <OrbitControls makeDefault />\n      <ambientLight />\n\n      {/** Example */}\n\n      <Surface\n        backgroundColor=\"crimson\"\n        width={3}\n        height={3}\n        position={[0, 0, 0]}\n        justifyContent=\"space-between\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        <Surface\n          width={CHILD_SIZE * 2}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/landscape.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE * 2}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/portrait.png\"\n        />\n        <Surface\n          width={CHILD_SIZE}\n          height={CHILD_SIZE}\n          backgroundSize=\"cover\"\n          backgroundColor=\"green\"\n          backgroundImage=\"./assets/images/robot.png\"\n        />\n      </Surface>\n    </Canvas>\n  );\n}\n"],"names":["lastRenderOrder","Surface","forwardedRef","children","width","height","backgroundColor","backgroundImage","backgroundSize","zIndex","position","flexDirection","alignItems","justifyContent","gap","onClick","onContextMenu","onDoubleClick","onPointerUp","onPointerDown","onPointerOver","onPointerOut","onPointerEnter","onPointerLeave","onPointerMove","onPointerMissed","onPointerCancel","onWheel","gl","useThree","state","size","React","texture","setTexture","undefined","THREE","loadAsync","then","anisotropy","capabilities","getMaxAnisotropy","surfaceRatio","imageRatioX","imageRatioY","image","clippingPlanes","setClippingPlanes","plane","clone","textureSize","setTextureSize","newSize","planes","set","groupRef","group","current","updateMatrixWorld","forEach","applyMatrix4","matrixWorld","renderOrder","key","deps","lastKey","useRenderKey","nodes","Array","isArray","vec","getChildPosition","child","index","reduce","node","props","contentSize","axis","axisInverted","length","includes","x","i","spacing","Math","max","y","ref","mergeRefs","args","color","transparent","depthWrite","visible","map","CHILD_SIZE","Layout","flat","linear","localClippingEnabled","PerspectiveCamera","makeDefault","OrbitControls"],"sourceRoot":""}